/* src/components/Main/MainviewStyles/Mainview.css */
@import "../../../styles/variables.css";

.main-view {
  position: relative;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  background-color: #000000;
}

.canvas-container {
  position: relative;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  display: block;
  transform: translateZ(0);
  will-change: opacity;
  opacity: 1;
  visibility: visible;
  background: radial-gradient( circle at center, var(--color-bg-light) 0%, #000000 100% );
  z-index: 1;
  transition: opacity 0.15s linear; /* For dimming when overlay-animating is removed */
}

.main-view.overlay-animating .canvas-container {
  opacity: 0.6;
  transition: opacity 0.05s linear; /* Fast dim when overlay appears */
}

.grid-overlay {
  position: absolute;
  top: 0; left: 0; width: 100%; height: 100%;
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
  background-size: 20px 20px;
  z-index: 2;
  pointer-events: none;
}

.canvas {
  position: absolute;
  top: 0; left: 0;
  width: 100% !important;
  height: 100% !important;
  display: block;
  backface-visibility: hidden;
  will-change: transform, opacity;

  /* Default state: hidden, ready for transition-in */
  opacity: 0;
  visibility: hidden; /* Start hidden, JS will make it visible for transition */
  transform: scale(1.15) translateY(-15px); /* Initial transform for transition */

  /* Base z-index, JS will override for the active/topmost layer during transition */
}
.canvas.layer-1 { z-index: 3; }
.canvas.layer-2 { z-index: 4; }
.canvas.layer-3 { z-index: 5; }


/*
  Core transition applied when opacity or transform changes.
  This is the master duration for preset fades.
*/
.canvas {
  transition-property: opacity, transform;
  transition-duration: 5000ms; /* <<< USER'S DESIRED DURATION >>> */
  transition-timing-function: cubic-bezier(0.2, 0.8, 0.2, 1);
}

/*
  .visible class is added by JS to set the final visible state.
  The transition to these properties is governed by the base .canvas transition.
*/
.canvas.visible {
  opacity: 1;
  visibility: visible;
  transform: translateY(0) scale(1);
}

/*
  JS-Controlled Transition Classes (for Strategy 1 - Z-index management)
  These are dynamically added and removed by MainView.jsx based on useRenderLifecycle state.
*/

/* Applied to the canvas that is FADING OUT */
.canvas.is-fading-out {
  /* The opacity and transform targets are implicitly opacity:0 and the initial transform */
  /* because this class is added to an element that was .visible (opacity:1, transform: initial) */
  /* and then JS will remove .visible, causing it to transition to the base .canvas styles. */
  z-index: 100 !important; /* CRITICAL: Keep on top during its fade out */
}

/* Applied to the canvas that is FADING IN */
.canvas.is-fading-in {
  /* This class is added to a canvas that starts with base .canvas styles (opacity:0, transform: initial-offscreen) */
  /* Then JS will also add .visible to it, triggering the transition to opacity:1 and transform: final-onscreen. */
  /* z-index should be lower than .is-fading-out, e.g., its default or a value like 90 */
  /* The default z-index from .layer-N should suffice if the outgoing has a higher z-index. */
  visibility: visible !important; /* Ensure it's visible to start its animation if JS hasn't added .visible yet */
}


/* Entity Logo */
.entity-logo {
  position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%);
  height: 40px; z-index: 150; /* Ensure logo is above all transitioning canvases */
  opacity: 1; visibility: visible;
}

/* Status Display, FPS Counter, etc. (styles remain the same) */
.status-display {
  position: fixed;
  top: 20%;
  left: 50%;
  transform: translateX(-50%);
  z-index: var(--z-top);
  backdrop-filter: blur(var(--blur-amount, 3px));
  -webkit-backdrop-filter: blur(var(--blur-amount, 3px));
  box-shadow: var(--shadow-md);
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--radius-md);
  font-size: var(--font-size-md);
  font-weight: 500;
  text-align: center;
  min-width: 250px;
  transition: opacity 1000ms cubic-bezier(0.2, 0.8, 0.2, 1); /* This is for the status message itself */
  opacity: 1;
  pointer-events: none;
}

.status-display.info-state {
  background: rgba(var(--color-warning-rgb), 0.25);
  border: 1px solid var(--color-warning-a50, rgba(255, 165, 0, 0.5));
  color: var(--color-warning, #ffa500);
  box-shadow: 0 0 12px rgba(var(--color-warning-rgb), 0.4);
}

.status-display.error-state {
  background: rgba(var(--color-error-rgb), 0.25);
  border: 1px solid var(--color-error-a50, rgba(255, 85, 85, 0.5));
  color: var(--color-error, #ff5555);
  box-shadow: 0 0 12px rgba(var(--color-error-rgb), 0.4);
}

.status-display.fade-out {
  opacity: 0;
}

.status-display .retry-render-button {
  display: block;
  margin: var(--space-sm) auto 0;
  padding: var(--space-xs) var(--space-md);
  background: var(--color-error-a30);
  color: var(--color-text);
  border: 1px solid var(--color-error-a50, rgba(255, 85, 85, 0.5));
  border-radius: var(--radius-sm);
  cursor: pointer;
  transition: background var(--transition-fast);
  pointer-events: auto;
  font-size: var(--font-size-sm);
  font-family: var(--font-family);
  font-weight: bold;
  text-transform: uppercase;
}
.status-display .retry-render-button:hover:not(:disabled) {
  background: var(--color-error-a50, rgba(255, 165, 0, 0.5));
}
.status-display .retry-render-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.hidden-audio-analyzer {
  position: absolute; left: -9999px; top: -9999px;
  opacity: 0; width: 0; height: 0; overflow: hidden; pointer-events: none;
}

.fps-counter {
  position: fixed;
  bottom: 10px;
  left: 10px;
  background: rgba(0, 0, 0, 0.5);
  color: #00ff99;
  padding: 5px 10px;
  font-size: 12px;
  font-family: monospace;
  border-radius: 4px;
  z-index: 1000;
  pointer-events: none;
}

.maximize-button {
  position: fixed;
  bottom: 20px;
  left: 20px;
  z-index: 10000;
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 8px;
  padding: 8px 12px;
  cursor: pointer;
  font-size: 14px;
  backdrop-filter: blur(4px);
  transition: all 0.3s ease;
}
.maximize-button:hover {
  background: rgba(255, 255, 255, 0.2);
}

#fullscreen-root.radar-cursor {
  cursor: url('/assets/cursors/radar-dot.svg') 8 8, auto;
}

.click-ping-svg-container {
  position: fixed;
  transform: translate(-50%, -50%);
  width: 40px;
  height: 40px;
  pointer-events: none;
  z-index: 10001;
  opacity: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

.click-ping-svg {
  width: 100%;
  height: 100%;
  overflow: visible !important;
}

.click-ping-svg circle {
  stroke-opacity: 1;
  transform-origin: center;
}

.ping-svg-animation .click-ping-svg circle {
  animation: ping-circle-anim 0.7s cubic-bezier(0.1, 0.7, 0.3, 1) forwards;
}

@keyframes ping-circle-anim {
  0% { r: 2; stroke-opacity: 1; transform: scale(0.5); }
  70% { r: 15; stroke-opacity: 0.7; transform: scale(1.2); }
  100% { r: 20; stroke-opacity: 0; transform: scale(1.5); }
}