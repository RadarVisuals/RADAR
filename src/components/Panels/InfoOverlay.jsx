// src/components/Panels/InfoOverlay.jsx
// FINAL VERSION v7: Using blue wordmark, adjusted structure slightly for consistency

import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import "./PanelStyles/InfoOverlay.css";
// --- UPDATED IMPORT PATH ---
import radarWordmarkBlue from "../../assets/branding/radarwordmarkblue.svg"; // Use the blue version

const InfoOverlay = ({ isOpen, onClose }) => {
  const [transitionState, setTransitionState] = useState("initial");
  const [activeTab, setActiveTab] = useState("philosophy");

  useEffect(() => {
    if (isOpen) {
      setTransitionState("fadeToContent"); // Simplified fade-in
    } else {
      setTransitionState("exiting");
      setTimeout(() => setTransitionState("initial"), 300); // Match CSS duration
    }
  }, [isOpen]);

  const handleClose = () => {
    setTransitionState("exiting");
    setTimeout(onClose, 300); // Match CSS duration
  };

  const handleBackgroundClick = (e) => {
    if (e.target === e.currentTarget) handleClose();
  };

  // Function to render the content based on the active tab
  const renderTabContent = () => {
    // ... (Keep all the case statements for rendering content exactly the same as before) ...
    switch (activeTab) {
        case "philosophy": return (<div className="tab-pane"> <h3>Philosophy: Stop Collecting Dust, Start Creating Fire</h3> <p> Face it: most NFTs are digital posters in expensive frames. Static. Lifeless. Collecting virtual dust in a wallet that's little more than a glorified vault. Is that *really* the revolution? We call bullshit. That thinking misses the entire point of true digital ownership and the universe of possibility unlocked by Lukso's Universal Profiles. </p> <h4>Centralization Chokes. Decentralization Creates.</h4> <p> Centralized platforms lure you in, then dictate *exactly* how you can interact with the stuff *you supposedly own*. Their APIs, their features, their arbitrary limits – they build the playground, you just get to use the swings they allow. That's not ownership; it's glorified renting. It inherently suffocates what's possible. </p> <p> Lukso flips the script. Your Universal Profile isn't just another account; it's **your sovereign space** on the blockchain. Your assets, your data, your configurations – they live *with you*, under *your control*, accessible via open standards (LSPs). No gatekeepers, no permission slips needed. This changes everything. </p> <div className="info-card"> <h4>Your NFT Isn't Wallpaper, It's an Engine (LSP8)</h4> <p>RADAR is the antidote to static and treats your NFTs as a living visual source. Assign NFTs to layers, make them breathe with audio, contort them with MIDI, make them react to on-chain events. Where most blockchain interactions remain abstract data, RADAR turns these into a visual experience.".</p> </div> <div className="info-card"> <h4>Ownership = Uncensored Freedom to Use (and Abuse)</h4> <p>Holding is basic. *Using* is power. RADAR gives you the god-mode freedom to push your assets. Layer 'em, glitch 'em, blend 'em into oblivion. Save infinite configurations (on your UP!), discover visuals the original creator couldn't fathom. Break the mold. Go wild.</p> </div> <div className="info-card"> <h4>Stop Consuming, Become the Creator</h4> <p>RADAR hands *you* the keys to the visual kingdom. That unique NFT becomes a **Generative Art Motor**. You're not just a collector; you're a VJ, a digital sculptor, unleashing the dormant power within your assets. Make something new. Make something *yours*.</p> </div> <div className="info-card"> <h4>Composable & Open: Build Together (ERC725Y)</h4> <p>Visual presets, MIDI maps, event reactions – all stored on *your* profile using standard ERC725Y keys. This isn't locked in our database; it's decentralized data YOU own. Imagine sharing presets, forking setups, building a collaborative visual scene – owned by the community, not a corporation. It’s possible NOW.</p> </div> <div className="info-card"> <h4>IP is Old News. Provenance + Use is the Future (LSP4)</h4> <p>Forget archaic IP restrictions. On Lukso, LSP4 metadata provides immutable, on-chain proof of origin, linked to the creator's UP. That's provenance solved. RADAR focuses on the *next* step: empowering radical *use* and *transformation*. It's about creative liberation, not legal handcuffs.</p> </div> <div className="info-card"> <h4>Lukso vs The World: It's Not Even Close (UP, LSP1)</h4> <p>Other chains bolt dApps onto basic wallets. Lukso integrates applications *into* the identity layer. RADAR runs *in* your UP, reacts *to* your UP's events (LSP1), saves state *on* your UP (ERC725Y). It's seamless. It's powerful. While others are still figuring out profile pictures, Lukso built the operating system for the decentralized future.</p> </div> <p style={{ marginTop: 'var(--space-lg)', fontWeight: 'bold' }}> Stop letting your assets gather virtual dust. Load 'em up. Crank the knobs. it's a statement against digital stagnation. It's proof that the future of digital art is dynamic, interactive, deeply personal, and radically free. </p> </div>);
        case "general": return (<div className="tab-pane"> <h3>What is RADAR?</h3> <p> RADAR (Reactive Asset Driven Audio Receiver) is more than just an NFT viewer; it's a high-performance, multi-layer visual synthesizer built for the revolutionary architecture of the Lukso ecosystem. It lives directly within your Universal Profile, transforming your static digital assets into dynamic, interactive art pieces you control. </p> <div className="info-card"> <h4>Core Pillars:</h4> <ul> <li><strong>Visual Synthesis Engine:</strong> Utilizes a 3-layer system where LSP8 NFTs become the raw visual material, manipulated in real-time.</li> <li><strong>Multi-Modal Reactivity:</strong> Responds dynamically to external stimuli – the rhythm and frequencies of audio (Web Audio API) and the precise control of MIDI hardware (Web MIDI API).</li> <li><strong>Blockchain Awareness (LSP1):</strong> Directly connects to your Universal Profile's event stream via the LSP1 UniversalReceiver standard, enabling visual reactions to on-chain activity like receiving LYX or tokens.</li> <li><strong>Decentralized State (ERC725Y):</strong> All your configurations – intricate visual presets, personalized MIDI mappings, custom event reactions – are saved directly onto *your* Universal Profile using standard ERC725Y key-value storage. No servers, no databases, just your profile.</li> <li><strong>Optimized Performance:</strong> Engineered for fluidity, targeting 144 FPS to ensure a seamless, immersive visual experience even with complex layer interactions.</li> </ul> </div> <p> RADAR is a demonstration of Lukso's potential: creating applications that are deeply integrated with user identity, truly ownable, and capable of unlocking unprecedented creative utility for digital assets. </p> </div>);
        case "layers": return (<div className="tab-pane"> <h3>Layer Controls & MIDI Mastery</h3> <p> RADAR's power lies in its three-layer system. Think of them as channels on a visual mixer, each driven by an NFT and fine-tuned with these controls: </p> <div className="info-card"> <h4>Layer Parameters:</h4> <ul> <li><strong>Layer Selection:</strong> Use the Top/Middle/Bottom tabs to target a specific layer.</li> <li><strong>Core Visuals:</strong> Control `Speed`, `Size`, `Angle`, `Direction`, and `Opacity`.</li> <li><strong>Positioning:</strong> Manually shift the layer's origin with `X/Y Position`.</li> <li><strong>Organic Movement:</strong> Add subtle, flowing motion with `Drift` and `Drift Speed`.</li> <li><strong>Visual Interaction:</strong> Define how layers blend using `Blend Mode`.</li> <li><strong>Visibility:</strong> Toggle layers on/off with `Enabled`.</li> </ul> </div> <div className="info-card"> <h4>MIDI Integration: Your Tactile Command Center</h4> <p>Why click when you can *play*? RADAR features robust MIDI Learn:</p> <ol> <li>Connect your MIDI controller.</li> <li>Click the small 'M' button next to any parameter (Speed, Size, X Pos, etc.).</li> <li>Move a physical knob, fader, or pad on your controller.</li> <li>Boom. Mapped. Instantly.</li> </ol> <p> The magic? Your entire mapping setup is saved as **one single entry** (<code>RADAR.MIDI.ParameterMap</code>) in your UP's ERC725Y storage. Load any visual preset – your knobs always control the same parameters. This persistent, global mapping is only possible thanks to Lukso's on-chain profile storage. </p> </div> </div>);
        case "events": return (<div className="tab-pane"> <h3>LSP1 UniversalReceiver: Visualizing Your Blockchain Life</h3> <p> Your Universal Profile isn't just a container; it's an active participant on the blockchain. RADAR taps into this activity using the standardized **LSP1 UniversalReceiver**, turning on-chain events into visual feedback. </p> <div className="info-card"> <h4>The LSP1 Advantage:</h4> <ul> <li><strong>Standardized Notifications:</strong> LSP1 provides a single, reliable endpoint on your UP for receiving notifications about incoming value (LYX, LSP7 Tokens) and potentially other standardized actions across the ecosystem.</li> <li><strong>Real-Time Connection:</strong> RADAR maintains a WebSocket connection to monitor these LSP1 events as they happen on your profile.</li> <li><strong>Custom Reactions:</strong> The "Event Reactions" panel lets you define rules: "IF LYX Received THEN Trigger Orange Pulse on Layer 1". You choose the event, the target layer, and the visual effect.</li> <li><strong>Persistent & Global (ERC725Y):</strong> Your entire ruleset is saved to the global <code>RADAR.EventReactions</code> key on your UP. Set it up once, and your profile will visually react according to your rules, no matter which visual preset is loaded.</li> </ul> </div> <p> This isn't polling a block explorer; it's leveraging the core architecture of Lukso UPs to create a reactive, personalized experience directly linked to your on-chain interactions. See your digital life unfold visually. </p> </div>);
        case "tokens": return (<div className="tab-pane"> <h3>NFTs Reimagined: LSP8 Assets as Visual Fuel</h3> <p> RADAR is built around Lukso's next-generation NFT standard, **LSP8 Identifiable Digital Asset**. These aren't just static collectibles; they are the dynamic source material for the visualizer. </p> <div className="info-card"> <h4>Why LSP8 Matters:</h4> <ul> <li><strong>Rich Metadata (LSP4):</strong> RADAR utilizes the associated **LSP4 Digital Asset Metadata** standard to reliably fetch crucial information like token names and image locations (including IPFS resolution). This structured data avoids the inconsistencies plagueing older NFT standards.</li> <li><strong>Designed for Interaction:</strong> While RADAR primarily uses the visual aspect, LSP8 allows for richer data and potential future interactions beyond what simple ERC721/1155 offer.</li> </ul> </div> <div className="info-card"> <h4>Loading Assets:</h4> <ul> <li><strong>Transparency is Power:</strong> Assets created with transparent backgrounds (like the RADAR Genesis collection) unlock the full potential of the layering system, allowing intricate visual blending.</li> <li><strong>Demo & Owned:</strong> Experiment instantly with built-in Demo Tokens, or connect your UP via the extension to access LSP8 NFTs you own from RADAR-whitelisted collections.</li> <li><strong>Simple Application:</strong> Use the Token Selector panel, choose your target layer (Top/Middle/Bottom), and click an asset to load it instantly.</li> </ul> </div> <p> By embracing LSP8 and LSP4, RADAR moves beyond basic NFT display towards true digital asset *utility* and *composability*. </p> </div>);
        case "configurations": return (<div className="tab-pane"> <h3>On-Chain Configurations: Your State, Your Profile (ERC725Y)</h3> <p> Forget saving files locally or relying on centralized backends. RADAR leverages the **ERC725Y** standard to store all your personalized configurations directly and decentrally onto your Universal Profile's storage. This is a cornerstone of the Lukso vision. </p> <div className="info-card"> <h4>How RADAR Uses Your UP Storage:</h4> <ul> <li> <strong>Visual Presets (Map: <code>{`RADAR.NamedConfiguration:<nameHash>`}</code>):</strong> Every unique visual setup you create (layers, loaded tokens, all parameters) can be saved as a named preset. RADAR uses an ERC725Y Map, hashing the preset name to generate a unique storage key. This allows you to store a virtually unlimited number of distinct visual configurations directly on your profile. </li> <li> <strong>Preset Index (Array: <code>RADAR.SavedConfigurationList[]</code>):</strong> To keep track of your named presets, RADAR maintains an ERC725Y Array storing the names of all your saved configurations. This populates the Preset Selector Bar. </li> <li> <strong>Default Preset (Singleton: <code>RADAR.DefaultConfigurationName</code>):</strong> Designate your favorite preset! RADAR stores the *name* of your chosen default preset in this Singleton key. This is the configuration automatically loaded when anyone views RADAR on your profile. </li> <li> <strong>Global MIDI Map (Singleton: <code>RADAR.MIDI.ParameterMap</code>):</strong> Your entire MIDI controller mapping schema is saved to this single key. Consistent control across all presets. </li> <li> <strong>Global Reactions (Singleton: <code>RADAR.EventReactions</code>):</strong> All your custom LSP1 event-to-visual effect rules are stored together in this key. Persistent blockchain reactivity. </li> </ul> </div> <div className="info-card"> <h4>Management:</h4> <p>Use the "Save" panel (write icon) to:</p> <ul> <li>Save new named Visual Presets.</li> <li>Optionally update the Global MIDI and Reaction keys when saving a preset.</li> <li>Explicitly save only the Global MIDI or Reaction keys.</li> <li>Load any saved preset by name or load your designated Default.</li> <li>Delete unwanted presets (which removes them from the Map and the Array).</li> </ul> </div> <p> This powerful combination of ERC725Y data types enables a truly decentralized, persistent, and user-owned application state, showcasing the advanced capabilities of Universal Profiles. </p> </div>);
        case "collections": return (<div className="tab-pane"> <h3>Whitelisted Collections: Curated Compatibility (ERC725Y & LSP4)</h3> <p> To ensure assets load correctly and interact well with the visual engine, RADAR utilizes an on-chain whitelist managed by the project's admin profile. </p> <div className="info-card"> <h4>The Whitelist System:</h4> <ul> <li><strong>On-Chain List (ERC725Y):</strong> A list of approved LSP8 collection contract addresses is stored under the <code>RADAR.WhitelistedCollections</code> key on the admin UP.</li> <li><strong>Loading Owned Assets:</strong> When you connect your UP, RADAR checks which LSP8 assets you hold (via LSP5 Received Assets) and cross-references them against this on-chain whitelist. Only assets from approved collections appear in the "My Owned Tokens" tab.</li> <li><strong>Metadata (LSP4):</strong> For displaying collection information (and potentially in the future, token details), RADAR relies on the collection contracts supporting the LSP4 metadata standard.</li> </ul> </div> <div className="info-card"> <h4>RADAR Genesis:</h4> <p> The primary whitelisted collection is **RADAR Genesis**, featuring 8,000 unique LSP8 NFTs specifically designed by the creator of RADAR with transparency and visual complexity ideal for this layering system. </p> </div> <p> This system balances openness with quality control, ensuring a smooth user experience while leveraging on-chain data for configuration. </p> </div>);
        case "artists": return (<div className="tab-pane"> <h3>Artist & Creation: The Vision Behind RADAR (LSP4)</h3> <p> RADAR wasn't built in a vacuum; it's the culmination of an artistic vision combined with deep exploration of Lukso's technical capabilities. It's a tool built *by* an artist, *for* enhancing digital art. </p> <div className="info-card"> <h4>The RADAR Genesis Collection:</h4> <p> At the heart of the demo and the initial offering is the **RADAR Genesis** collection. This isn't random art; it's 8,000 unique LSP8 NFTs derived from over 350 meticulously hand-drawn characters, algorithmically processed into fractal forms. Crucially, they were designed from the ground up with **transparent backgrounds** and intricate detail specifically for RADAR's dynamic layering and manipulation engine. </p> </div> <div className="info-card"> <h4>Empowering Owners & Redefining Utility:</h4> <ul> <li><strong>From Static to Dynamic:</strong> RADAR empowers owners to transform the base artwork. Your NFT is the seed for countless unique visual experiences you create and control.</li> <li><strong>Immutable Artist Link (LSP4):</strong> Thanks to LSP4 metadata, the connection between the NFT, its collection, and the original creator's Universal Profile is permanently recorded on-chain. Provenance is inherent.</li> <li><strong>A Solo Endeavor:</strong> This entire project – the concept, the 8k artwork collection, the complex React/Canvas/Blockchain application, the UI/UX design – represents thousands of hours of work by a single creator dedicated to realizing this vision on Lukso.</li> </ul> </div> <p> The goal is to demonstrate that NFTs can be more than static collectibles – they can be living, breathing components of a larger creative ecosystem. </p> </div>);
        case "roadmap": return (<div className="tab-pane"> <h3>Roadmap: The Journey Ahead</h3> <p> RADAR is launched, but the vision extends further. This is a living project fueled by the potential of Lukso and the desire to push creative boundaries. </p> <div className="info-card"> <h4>Potential Future Directions:</h4> <ul> <li><strong>Visual Effect Expansion:</strong> Adding more diverse and controllable visual effects triggered by LSP1 events or MIDI signals.</li> <li><strong>Advanced MIDI Capabilities:</strong> Investigating features like MIDI clock synchronization for tempo-based effects, or more sophisticated mapping options (e.g., value ranges, toggles).</li> <li><strong>Preset Sharing & Discovery:</strong> Building tools or standards to allow users to easily share their on-chain RADAR presets, fostering a community library of visual setups.</li> <li><strong>Collection Onboarding:</strong> Streamlining the process for suggesting and potentially whitelisting new, compatible LSP8 collections from the community.</li> <li><strong>Performance & Optimization:</strong> Continuously refining the rendering engine (CanvasManager) for maximum efficiency across devices.</li> <li><strong>Open Source Strategy:</strong> Evaluating which parts of RADAR could be open-sourced to serve as examples and building blocks for other Lukso developers.</li> </ul> </div> <p> The path forward will be shaped by user feedback and the evolving capabilities of the Lukso network. Join the conversation and help define the future of dynamic digital art! </p> </div>);
        default: return (<div className="tab-pane"> <p>Select a tab to view information.</p> </div>);
    }
  };

  // Main component render
  return (
    <div className={`overlay ${transitionState}`} onClick={handleBackgroundClick}>
      {/* Main Content Container */}
      <div className="overlay-content">
        <div className="overlay-header">
          <h2 className="overlay-title">
            {/* Use the imported SVG - Update the src */}
            <img src={radarWordmarkBlue} alt="RADAR Logo" className="radar-logo-image"/>
          </h2>
          <button className="close-button" onClick={handleClose}>✕</button>
        </div>
        <div className="overlay-body">
          {/* Tab Buttons - USE UNIQUE CLASS NAMES */}
          <div className="info-overlay-tab-navigation">
            <button className={`info-overlay-tab-button ${activeTab === "philosophy" ? "active" : ""}`} onClick={() => setActiveTab("philosophy")}>Philosophy</button>
            <button className={`info-overlay-tab-button ${activeTab === "general" ? "active" : ""}`} onClick={() => setActiveTab("general")}>About</button>
            <button className={`info-overlay-tab-button ${activeTab === "layers" ? "active" : ""}`} onClick={() => setActiveTab("layers")}>Controls</button>
            <button className={`info-overlay-tab-button ${activeTab === "events" ? "active" : ""}`} onClick={() => setActiveTab("events")}>Universal Receiver</button>
            <button className={`info-overlay-tab-button ${activeTab === "tokens" ? "active" : ""}`} onClick={() => setActiveTab("tokens")}>Tokens</button>
            <button className={`info-overlay-tab-button ${activeTab === "configurations" ? "active" : ""}`} onClick={() => setActiveTab("configurations")}>Configurations</button>
            <button className={`info-overlay-tab-button ${activeTab === "collections" ? "active" : ""}`} onClick={() => setActiveTab("collections")}>Collections</button>
            <button className={`info-overlay-tab-button ${activeTab === "artists" ? "active" : ""}`} onClick={() => setActiveTab("artists")}>Artists</button>
            <button className={`info-overlay-tab-button ${activeTab === "roadmap" ? "active" : ""}`} onClick={() => setActiveTab("roadmap")}>Roadmap</button>
          </div>

          {/* Rendered Tab Content */}
          <div className="tab-content">
            {renderTabContent()}
          </div>
        </div>
      </div>
    </div>
  );
};

// PropTypes definition remains the same
InfoOverlay.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
};

export default InfoOverlay;